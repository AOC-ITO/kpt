<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kpt â€“ Live</title>
    <link>https://googlecontainertools.github.io/kpt/reference/live/</link>
    <description>Recent content in Live on Kpt</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://googlecontainertools.github.io/kpt/reference/live/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Reference: Inventory Object Upgrade (alpha)</title>
      <link>https://googlecontainertools.github.io/kpt/reference/live/alpha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/live/alpha/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Instructions (alpha) to upgrade to next generation inventory object
--&gt;
&lt;h3 id=&#34;how-to-upgrade-to-the-next-generation-inventory-object-alpha&#34;&gt;How to Upgrade to the Next Generation Inventory Object (Alpha)&lt;/h3&gt;
&lt;h4 id=&#34;what-is-an-inventory-object&#34;&gt;What is an Inventory Object&lt;/h4&gt;
&lt;p&gt;An inventory object is the automatically generated object which keeps track
of the set of objects applied together. The current inventory object type
is a &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/configmap/&#34;&gt;&lt;strong&gt;ConfigMap&lt;/strong&gt;&lt;/a&gt;,
and it is usually defined in a package file called
&lt;strong&gt;inventory-template.yaml&lt;/strong&gt;. This file is created from an invocation of
&lt;code&gt;kpt live init&lt;/code&gt;. A typical use of the inventory object is to prune (delete)
objects omitted locally.&lt;/p&gt;
&lt;h4 id=&#34;what-is-a-next-generation-inventory-object&#34;&gt;What is a Next Generation Inventory Object&lt;/h4&gt;
&lt;p&gt;The next generation inventory object is a &lt;strong&gt;ResourceGroup&lt;/strong&gt; custom resource
replacing the current &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/configmap/&#34;&gt;&lt;strong&gt;ConfigMap&lt;/strong&gt;&lt;/a&gt;.
Because the new inventory object is a
custom resource, you must have permissions to add a custom resource
definition (CRD) to the cluster.&lt;/p&gt;
&lt;h4 id=&#34;upgrade-scenario-1-new-uninitialized-packages&#34;&gt;Upgrade Scenario 1: New (Uninitialized) Packages&lt;/h4&gt;
&lt;p&gt;Packages which are newly downloaded and uninitialized should follow the
following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;export RESOURCE_GROUP_INVENTORY=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kpt live init &amp;lt;PACKAGE DIR&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;init&lt;/code&gt; step adds an &lt;code&gt;inventory&lt;/code&gt; section in the
package Kptfile. The package is now eligible to be applied
with &lt;code&gt;kpt live apply &amp;lt;PACKAGE DIR&amp;gt;&lt;/code&gt;. This command will
automatically apply the &lt;strong&gt;ResourceGroup&lt;/strong&gt; CRD if it has not
already been applied.&lt;/p&gt;
&lt;h4 id=&#34;upgrade-scenario-2-existing-initialized-packages&#34;&gt;Upgrade Scenario 2: Existing (Initialized) Packages&lt;/h4&gt;
&lt;p&gt;Existing packages which have already been initialized, should follow
the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;export RESOURCE_GROUP_INVENTORY=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kpt live migrate &amp;lt;PACKAGE DIR&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Initially, the &lt;code&gt;migrate&lt;/code&gt; command applies the &lt;strong&gt;ResourceGroup&lt;/strong&gt; CRD.
Then the &lt;code&gt;migrate&lt;/code&gt; command replaces the
&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/configmap/&#34;&gt;&lt;strong&gt;ConfigMap&lt;/strong&gt;&lt;/a&gt;
inventory object in the cluster (if it exists) with a &lt;strong&gt;ResourceGroup&lt;/strong&gt;
custom resource. The &lt;code&gt;migrate&lt;/code&gt; command also deletes the local inventory
&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/configmap/&#34;&gt;&lt;strong&gt;ConfigMap&lt;/strong&gt;&lt;/a&gt;
config file (usually &lt;strong&gt;inventory-template.yaml&lt;/strong&gt;). If this local
&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/configmap/&#34;&gt;&lt;strong&gt;ConfigMap&lt;/strong&gt;&lt;/a&gt;
file is stored in a github repository, the removal
needs to be committed to the repository to finalize the removal.
Finally, the &lt;code&gt;migrate&lt;/code&gt; command adds an &lt;code&gt;inventory&lt;/code&gt;
section to the Kptfile if it did not already exist. Updates to
the package can now be applied using &lt;code&gt;kpt live apply &amp;lt;PACKAGE DIR&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;new-alpha-commands&#34;&gt;New (Alpha) Commands&lt;/h3&gt;
&lt;h4 id=&#34;migrate&#34;&gt;Migrate&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../migrate&#34;&gt;kpt live migrate&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;install-resource-group&#34;&gt;Install Resource Group&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../install-resource-group&#34;&gt;kpt live install-resource-group&lt;/a&gt; The &lt;strong&gt;ResourceGroup&lt;/strong&gt;
CRD is added to the cluster as a side effect of &lt;code&gt;kpt live apply&lt;/code&gt;. However, this
&lt;code&gt;install-resource-group&lt;/code&gt; command allows the user to only apply the
&lt;strong&gt;ResourceGroup&lt;/strong&gt; CRD without applying other resources.&lt;/p&gt;
&lt;h3 id=&#34;updated-existing-commands&#34;&gt;Updated Existing Commands&lt;/h3&gt;
&lt;h4 id=&#34;init&#34;&gt;Init&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;../init&#34;&gt;kpt live init&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;troubleshooting-and-verifying&#34;&gt;Troubleshooting and Verifying&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Error: unable to apply &lt;strong&gt;ResourceGroup&lt;/strong&gt; CRD&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kpt live apply &amp;lt;PACKAGE_DIR&amp;gt;
error: unable to add resourcegroups.kpt.dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This message means the user does not have permissions to add the
&lt;strong&gt;ResourceGroup&lt;/strong&gt; CRD to the cluster. Once the RBAC permissions have
been updated, the user can manually install the CRD with the following
command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kpt live install-resource-group
installing ResourceGroup custom resource definition...success
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The user can verify the CRD was successfully added with the following
command (using default namespace):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl get resourcegroups.kpt.dev
No resources found in default namespace.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Until the user is able to update permissions to
apply the CRD, the user can continue to use the previous
&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/configmap/&#34;&gt;&lt;strong&gt;ConfigMap&lt;/strong&gt;&lt;/a&gt;
inventory object by unsetting the environment variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;unset&lt;/span&gt; RESOURCE_GROUP_INVENTORY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Error: configuration already created initialization error&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kpt live init &amp;lt;PACKAGE DIR&amp;gt;
error: ResourceGroup configuration has already been created. Changing
them after a package has been applied to the cluster can lead to
undesired results. Use the --force flag to suppress this error.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This message means the &lt;strong&gt;ResourceGroup&lt;/strong&gt; initialization has
&lt;em&gt;already&lt;/em&gt; happened. Unless, you want to &lt;code&gt;--force&lt;/code&gt; new values,
this can safely be ignored.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to check if the &lt;strong&gt;ResourceGroup&lt;/strong&gt; CRD has &lt;em&gt;not&lt;/em&gt; been
successfully applied to the cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl get resourcegroups.kpt.dev
error: the server doesn&lt;span style=&#34;color:#a40000&#34;&gt;&amp;#39;&lt;/span&gt;t have a resource &lt;span style=&#34;color:#204a87&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;resourcegroups&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If a &lt;code&gt;No resources found&lt;/code&gt; message is returned, the
&lt;strong&gt;ResourceGroup&lt;/strong&gt; CRD &lt;em&gt;has&lt;/em&gt; been successfully applied,
but there are no &lt;strong&gt;ResourceGroup&lt;/strong&gt; custom resources
found in the namespace. Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl get resourcegroups.kpt.dev
No resources found in default namespace.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;How to check if the applied inventory object in the cluster has
been upgraded to a &lt;strong&gt;ResourceGroup&lt;/strong&gt; custom resource&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl get resourcegroups.kpt.dev -n &amp;lt;PKG NAMESPACE&amp;gt; --selector&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;cli-utils.sigs.k8s.io/inventory-id&amp;#39;&lt;/span&gt; -o name
resourcegroup.kpt.dev/inventory-62308923
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;How to check if the applied inventory object in the cluster is
not upgraded and is still a &lt;strong&gt;ConfigMap&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl get cm -n &amp;lt;PKG NAMESPACE&amp;gt; --selector&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;cli-utils.sigs.k8s.io/inventory-id&amp;#39;&lt;/span&gt; -o name
configmap/inventory-62308923
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Reference: Apply</title>
      <link>https://googlecontainertools.github.io/kpt/reference/live/apply/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/live/apply/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Apply a package to the cluster (create, update, delete)
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/live-apply.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;Apply creates, updates and deletes resources in the cluster to make the remote
cluster resources match the local package configuration.&lt;/p&gt;
&lt;p&gt;Kpt apply is and extended version of kubectl apply, with added support
for pruning and blocking on resource status.&lt;/p&gt;
&lt;p&gt;Kpt apply has a different usage pattern (args + flags) from kubectl to make
it consistent with other kpt commands.&lt;/p&gt;
&lt;h4 id=&#34;kubectl-apply-vs-kpt-live-apply&#34;&gt;&lt;code&gt;kubectl apply&lt;/code&gt; vs &lt;code&gt;kpt live apply&lt;/code&gt;&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;kubectl apply&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;kpt live apply&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Usage&lt;/td&gt;
&lt;td&gt;kubectl apply -f /dir&lt;/td&gt;
&lt;td&gt;kpt live apply /dir&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Applied resource set&lt;/td&gt;
&lt;td&gt;Not tracked&lt;/td&gt;
&lt;td&gt;Tracked&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Prune&lt;/td&gt;
&lt;td&gt;Imperative and error prone&lt;/td&gt;
&lt;td&gt;Declarative and reliable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Status&lt;/td&gt;
&lt;td&gt;Not supported&lt;/td&gt;
&lt;td&gt;Supported&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;applied-resource-set&#34;&gt;Applied resource set&lt;/h5&gt;
&lt;p&gt;This refers to the set of resources in the directory applied to cluster as a
group.  &lt;code&gt;kpt live apply&lt;/code&gt; tracks the state of your applied resource set and
related configuration. This helps &lt;code&gt;kpt&lt;/code&gt; to reliably reconcile the real world
resources with your configuration changes.&lt;/p&gt;
&lt;h3 id=&#34;client-side-apply-versus-server-side-apply&#34;&gt;Client-Side Apply versus Server-Side Apply&lt;/h3&gt;
&lt;p&gt;kpt live apply defaults to client-side apply, so the updates are accomplished
by calculating and sending a patch from the client. Server-side apply
with the &lt;code&gt;--server-side&lt;/code&gt; flag sends the entire resource to the server
for the update. The server-side flags and functionality are the same
as kubectl.&lt;/p&gt;
&lt;h3 id=&#34;prune&#34;&gt;Prune&lt;/h3&gt;
&lt;p&gt;kpt live apply will automatically delete resources which have been
previously applied, but which are no longer included. This clean-up
functionality is called pruning. For example, consider a package
which has been applied with the following three resources:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service-1 (Service)
deployment-1 (Deployment)
config-map-1 (ConfigMap)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then imagine the package is updated to contain the following resources,
including a new ConfigMap named &lt;code&gt;config-map-2&lt;/code&gt; (Notice that &lt;code&gt;config-map-1&lt;/code&gt;
is not part of the updated package):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service-1 (Service)
deployment-1 (Deployment)
config-map-2 (ConfigMap)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When the updated package is applied, &lt;code&gt;config-map-1&lt;/code&gt; is automatically
deleted (pruned) since it is omitted.&lt;/p&gt;
&lt;p&gt;In order to take advantage of this automatic clean-up, a package must contain
an &lt;strong&gt;Inventory Template&lt;/strong&gt;, which is a ConfigMap with a special label. An example is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;v1&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;ConfigMap&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;inventory&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;-78889725&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;default&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;cli-utils.sigs.k8s.io/inventory-id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;b49dd93f-28db&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;-4626&lt;/span&gt;-b42d-749dd4c5ba2f&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the special label is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cli-utils.sigs.k8s.io/inventory-id: *b49dd93f-28db-4626-b42d-749dd4c5ba2f*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;kpt live apply&lt;/code&gt; recognizes this template from the special label, and based
on this kpt will create new inventory object with the metadata of all applied
objects in the ConfigMap&amp;rsquo;s data field. Subsequent &lt;code&gt;kpt live apply&lt;/code&gt; commands can
then query the inventory object, and calculate the omitted objects, cleaning up
accordingly. On every subsequent apply operation, the inventory object is updated
to reflect the current set of resources.&lt;/p&gt;
&lt;h3 id=&#34;ordering&#34;&gt;Ordering&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kpt live apply&lt;/code&gt; will sort the resources before applying them. This makes sure
namespaces are applied before resources going into the namespace, configmaps
are applied before Deployments and StatefulSets, and other known dependencies
between the builtin kubernetes resource types. Kpt does not analyze the actual
dependencies between the resources, but sorts the resources based on the Kind
of resources. Custom ordering of resources is not supported.&lt;/p&gt;
&lt;p&gt;During pruning, the same rules are used, but resources will be deleted in
reverse order. Note that this does not wait for a resource to be deleted
before continuing to delete the remaining resources.&lt;/p&gt;
&lt;p&gt;The following resources will be applied first in this order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Namespace&lt;/li&gt;
&lt;li&gt;ResourceQuota&lt;/li&gt;
&lt;li&gt;StorageClass&lt;/li&gt;
&lt;li&gt;CustomResourceDefinition&lt;/li&gt;
&lt;li&gt;MutatingWebhookConfiguration&lt;/li&gt;
&lt;li&gt;ServiceAccount&lt;/li&gt;
&lt;li&gt;PodSecurityPolicy&lt;/li&gt;
&lt;li&gt;Role&lt;/li&gt;
&lt;li&gt;ClusterRole&lt;/li&gt;
&lt;li&gt;RoleBinding&lt;/li&gt;
&lt;li&gt;ClusterRoleBinding&lt;/li&gt;
&lt;li&gt;ConfigMap&lt;/li&gt;
&lt;li&gt;Secret&lt;/li&gt;
&lt;li&gt;Service&lt;/li&gt;
&lt;li&gt;LimitRange&lt;/li&gt;
&lt;li&gt;PriorityClass&lt;/li&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;StatefulSet&lt;/li&gt;
&lt;li&gt;CronJob&lt;/li&gt;
&lt;li&gt;PodDisruptionBudget&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Following this, any resources that are not mentioned will be applied.&lt;/p&gt;
&lt;p&gt;The following resources will be applied last in the following order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ValidatingWebhookConfiguration&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;status-reconcile-timeoutduration&#34;&gt;Status (reconcile-timeout=&amp;lt;DURATION&amp;gt;)&lt;/h3&gt;
&lt;p&gt;kpt live apply also has support for computing status for resources. This is
useful during apply for making sure that not only are the set of resources applied
into the cluster, but also that the desired state expressed in the resource are
fully reconciled in the cluster. An example of this could be applying a deployment. Without
looking at the status, the operation would be reported as successful as soon as the
deployment resource has been created in the apiserver. With status, kpt live apply will
wait until the desired number of pods have been created and become available.&lt;/p&gt;
&lt;p&gt;Status is computed through a set of rules for the built-in types, and
functionality for polling a set of resources and computing the aggregate status
for the set. For CRDs, the status computation make a set of assumptions about
the fields in the status object of the resource and the conditions that
are set by the custom controller. If CRDs follow the recommendations below,
kpt live apply will be able to correctly compute status&lt;/p&gt;
&lt;h4 id=&#34;recommendations-for-crds&#34;&gt;Recommendations for CRDs&lt;/h4&gt;
&lt;p&gt;The custom controller should use the following conditions to signal whether
a resource has been fully reconciled, and whether it has encountered any
problems:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reconciling&lt;/strong&gt;: Indicates that the resource does not yet match its spec. i.e.
the desired state as expressed in the resource spec object has not been
fully realized in the cluster. A value of True means the controller
is in the process of reconciling the resource while a value of False means
there are no work left for the controller.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stalled&lt;/strong&gt;: Indicates that the controller is not able to make the expected
progress towards reconciling the resource. The cause of this status can be
either that the controller observes an actual problem (like a pod not being
able to start), or that something is taking longer than expected (similar
to the &lt;code&gt;progressDeadlineSeconds&lt;/code&gt; timeout on Deployments). If this condition
is True, it should be interpreted that something might be wrong. It does not
mean that the resource will never be reconciled. Most process in Kubernetes
retry forever, so this should not be considered a terminal state.&lt;/p&gt;
&lt;p&gt;These conditions adhere to the &lt;a href=&#34;https://www.google.com/url?q=https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md%23typical-status-properties&amp;amp;sa=D&amp;amp;ust=1585160635349000&amp;amp;usg=AFQjCNE3ncANdus3xckLj3fkeupwFUoABw&#34;&gt;Kubernetes design principles&lt;/a&gt;
which include expressing conditions using abnormal-true polarity. There is
currently a &lt;a href=&#34;https://github.com/kubernetes/community/pull/4521&#34;&gt;proposal&lt;/a&gt; to change to guidance for conditions. If this is
accepted, the recommended conditions for kpt might also change, but we will
continue to support the current set of conditions.&lt;/p&gt;
&lt;p&gt;CRDs should also set the &lt;code&gt;observedGeneration&lt;/code&gt; field in the status object, a
pattern already common in the built-in types. The controller should update
this field every time it sees a new generation of the resource. This allows
the kpt library to distinguish between resources that do not have any
conditions set because they are fully reconciled, from resources that have no
conditions set because they have just been created.&lt;/p&gt;
&lt;p&gt;An example of a resource where the latest change has been observed by
the controller which is currently in the process of reconciling would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;example.com&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;Foo&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;generation&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;bar&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;replicas&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;observedGeneration&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;conditions&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;lastTransitionTime&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2020-03-25T21:20:38Z&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;lastUpdateTime&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2020-03-25T21:20:38Z&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;Resource&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;is&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;reconciling&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;reason&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;Reconciling&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;Reconciling&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;lastTransitionTime&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2020-03-25T21:20:27Z&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;lastUpdateTime&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2020-03-25T21:20:39Z&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;False&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;Stalled&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The status for this resource state will be InProgress. So if the
&lt;code&gt;--reconcile-timeout&lt;/code&gt; flag is set, kpt live apply will wait until
the &lt;code&gt;Reconciling&lt;/code&gt; condition is &lt;code&gt;False&lt;/code&gt; before pruning and exiting.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# apply resources and prune&lt;/span&gt;
kpt live apply my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# apply resources and wait for all the resources to be reconciled before pruning&lt;/span&gt;
kpt live apply --reconcile-timeout&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;15m my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# apply resources and specify how often to poll the cluster for resource status&lt;/span&gt;
kpt live apply --reconcile-timeout&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;15m --poll-period&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;5s my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt live apply DIR [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;args&#34;&gt;Args&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;DIR:
  Path to a package directory.  The directory must contain exactly
  one ConfigMap with the inventory object annotation.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;flags&#34;&gt;Flags&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;--poll-period:
  The frequency with which the cluster will be polled to determine
  the status of the applied resources. The default value is every 2 seconds.

--reconcile-timeout:
  The threshold for how long to wait for all resources to reconcile before
  giving up. If this flag is not set, kpt live apply will not wait for
  resources to reconcile.

--prune-timeout:
  The threshold for how long to wait for all pruned resources to be
  deleted before giving up. If this flag is not set, kpt live apply will not
  wait. In most cases, it would also make sense to set the
  --prune-propagation-policy to Foreground when this flag is set.

--prune-propagation-policy:
  The propagation policy kpt live apply should use when pruning resources. The
  default value here is Background. The other options are Foreground and Orphan.

--output:
  This determines the output format of the command. The default value is
  events, which will print the events as they happen. The other option is
  table, which will show the output in a table format.

--server-side:
  Boolean which sends the entire resource to the server during apply instead of
  calculating a client-side patch. Default value is false (client-side). Available
  in version v0.36.0 and above. If not available, the user will see: &amp;quot;error: unknown flag&amp;quot;.

--field-manager:
  String specifying the **owner** of the fields being applied. Only usable
  when --server-side flag is specified. Default value is kubectl. Available in
  version v0.36.0 and above. If not available, the user will see: &amp;quot;error: unknown flag&amp;quot;.

--force-conflicts:
  Boolean which forces overwrite of field conflicts during apply due to
  different field managers. Only usable when --server-side flag is specified.
  Default value is false (error and failure when field managers conflict).
  Available in v0.36.0 and above. If not available, the user will see: &amp;quot;error: unknown flag&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Destroy</title>
      <link>https://googlecontainertools.github.io/kpt/reference/live/destroy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/live/destroy/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Remove all previously applied resources in a package from the cluster
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/live-destroy.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;The destroy command removes all files belonging to a package from the cluster.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# remove all resources in a package from the cluster&lt;/span&gt;
kpt live destroy my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt live destroy DIR
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;args&#34;&gt;Args&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;DIR:
  Path to a package directory.  The directory must contain exactly
  one ConfigMap with the grouping object annotation.
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Diff</title>
      <link>https://googlecontainertools.github.io/kpt/reference/live/diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/live/diff/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Diff the local package config against the live cluster resources
--&gt;
&lt;p&gt;The diff command compares the live cluster state of each pacakge
resource against the local package config.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# diff the config in &amp;#34;my-dir&amp;#34; against the live cluster resources&lt;/span&gt;
kpt live diff my-dir/

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# specify the local diff program to use&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;KUBECTL_EXTERNAL_DIFF&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;meld&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt; kpt live diff my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt live diff DIR

Output is always YAML.

KUBECTL_EXTERNAL_DIFF environment variable can be used to select your own diff command. By default, the &amp;quot;diff&amp;quot; command
available in your path will be run with &amp;quot;-u&amp;quot; (unicode) and &amp;quot;-N&amp;quot; (treat new files as empty) options.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;args&#34;&gt;Args&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;DIR:
  Path to a package directory.  The directory must contain exactly one ConfigMap with the inventory annotation.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;exit-status&#34;&gt;Exit Status&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;The following exit values shall be returned:

0 No differences were found. 1 Differences were found. &amp;gt;1 kpt live or diff failed with an error.

Note: KUBECTL_EXTERNAL_DIFF, if used, is expected to follow that convention.
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Fetch-k8s-schema</title>
      <link>https://googlecontainertools.github.io/kpt/reference/live/fetch-k8s-schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/live/fetch-k8s-schema/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Fetch the OpenAPI schema from the cluster
--&gt;
&lt;p&gt;The fetch-k8s-schema command downloads the OpenAPI schema from the cluster
given by the context. It prints the result to stdout.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# print the schema for the cluster given by the current context&lt;/span&gt;
kpt live fetch-k8s-schema

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# print the schema after formatting using a named context&lt;/span&gt;
kpt live fetch-k8s-schema --context&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;myContext --pretty-print
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt live fetch-k8s-schema [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;flags&#34;&gt;Flags&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;--pretty-print
  Format the output before printing
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Init</title>
      <link>https://googlecontainertools.github.io/kpt/reference/live/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/live/init/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Initialize a package with a object to track previously applied resources
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/live-init.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;The init command initializes a package with a template resource which will
be used to track previously applied resources so that they can be pruned
when they are deleted.&lt;/p&gt;
&lt;p&gt;The template resource is required by other live commands
such as apply, preview and destroy.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# initialize a package&lt;/span&gt;
kpt live init my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# initialize a package with a specific name for the group of resources&lt;/span&gt;
kpt live init --namespace&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt; my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt live init DIRECTORY [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;args&#34;&gt;Args&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;DIR:
  Path to a package directory.  The directory must contain exactly
  one ConfigMap with the grouping object annotation.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;flags&#34;&gt;Flags&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;--inventory-id:
  Identifier for group of applied resources. Must be composed of valid label characters.
--namespace:
  namespace for the inventory object. If not provided, kpt will check if all the resources
  in the package belong in the same namespace. If they are, that namespace will be used. If
  they are not, the namespace in the user&#39;s context will be chosen.
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Init (alpha)</title>
      <link>https://googlecontainertools.github.io/kpt/reference/live/init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/live/init/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Initialize a package with a object to track previously applied resources
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/live-init.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This alpha version of the command is for the new ResourceGroup as
inventory object functionality. The alpha version of this command is not
available unless the &lt;code&gt;RESOURCE_GROUP_INVENTORY&lt;/code&gt; environment variable is set.&lt;/p&gt;
&lt;p&gt;The init command will initialize a package using the next generation inventory
object (&lt;strong&gt;ResourceGroup&lt;/strong&gt; custom resource). See commands &lt;a href=&#34;./migrate&#34;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&#34;./install-resource-group&#34;&gt;&lt;code&gt;install-resource-group&lt;/code&gt;&lt;/a&gt; for more information. A Kptfile
is required in the package directory.&lt;/p&gt;
&lt;p&gt;The inventory object is required by other live commands
such as apply, preview and destroy.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# initialize a package with the next generation inventory metadata&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RESOURCE_GROUP_INVENTORY&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
kpt live init my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# initialize a package with a specific name for the group of resources&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RESOURCE_GROUP_INVENTORY&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
kpt live init --namespace&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;test-namespace my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt live init DIRECTORY [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;args&#34;&gt;Args&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;DIR:
  Path to a package directory. The package directory must contain a Kptfile.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;flags&#34;&gt;Flags&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;--inventory-id:
  Identifier for group of applied resources. Must be composed of valid label characters.
--namespace:
  namespace for the inventory object. If not provided, kpt will check if all the resources
  in the package belong in the same namespace. If they are, that namespace will be used. If
  they are not, the namespace in the user&#39;s context will be chosen.
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Install-resource-group (alpha)</title>
      <link>https://googlecontainertools.github.io/kpt/reference/live/install-resource-group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/live/install-resource-group/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Apply ResourceGroup custom resource definition to the cluster
--&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This is an alpha command for the new ResourceGroup as inventory object
functionality. This alpha command is not available unless the &lt;code&gt;RESOURCE_GROUP_INVENTORY&lt;/code&gt;
environment variable is set.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;install-resource-group&lt;/code&gt; command applies the &lt;strong&gt;ResourceGroup&lt;/strong&gt;
custom resource definition (CRD) to the cluster. This CRD allows
&lt;strong&gt;ResourceGroup&lt;/strong&gt; custom resources to be created, acting as inventory
objects. The &lt;strong&gt;ResourceGroup&lt;/strong&gt; custom resource is the next generation
inventory object after the
&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/configmap/&#34;&gt;&lt;strong&gt;ConfigMap&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# install the ResourceGroup CRD&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RESOURCE_GROUP_INVENTORY&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
kpt live install-resource-group
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt live install-resource-group
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;args&#34;&gt;Args&lt;/h4&gt;
&lt;p&gt;None&lt;/p&gt;
&lt;h4 id=&#34;flags&#34;&gt;Flags&lt;/h4&gt;
&lt;p&gt;None&lt;/p&gt;
&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Migrate (alpha)</title>
      <link>https://googlecontainertools.github.io/kpt/reference/live/migrate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/live/migrate/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Migrate the package inventory object to a ResourceGroup custom resource
--&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This is an alpha command for the new ResourceGroup as inventory object
functionality. This alpha command is not available unless the &lt;code&gt;RESOURCE_GROUP_INVENTORY&lt;/code&gt;
environment variable is set.&lt;/p&gt;
&lt;p&gt;The migrate command upgrades the inventory object from a
&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/configmap/&#34;&gt;&lt;strong&gt;ConfigMap&lt;/strong&gt;&lt;/a&gt;
to a &lt;strong&gt;ResourceGroup&lt;/strong&gt; custom resource. The migrate performs the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Applies the &lt;strong&gt;ResourceGroup&lt;/strong&gt; custom resource definition (see
&lt;code&gt;kpt live install-resource-group&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;If a
&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/configmap/&#34;&gt;&lt;strong&gt;ConfigMap&lt;/strong&gt;&lt;/a&gt;
inventory object exists in the cluster, the inventory
object is upgraded to a &lt;strong&gt;ResourceGroup&lt;/strong&gt; custom resource (deleting the
previous
&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/configmap/&#34;&gt;&lt;strong&gt;ConfigMap&lt;/strong&gt;&lt;/a&gt;
).&lt;/li&gt;
&lt;li&gt;If it has not already been created, the Kptfile inventory section
is filled in. These values are used to create the &lt;strong&gt;ResourceGroup&lt;/strong&gt;
custom resource inventory object when the package is applied.&lt;/li&gt;
&lt;li&gt;Deletes the local
&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/configmap/&#34;&gt;&lt;strong&gt;ConfigMap&lt;/strong&gt;&lt;/a&gt;
file (usually &lt;strong&gt;inventory-template.yaml&lt;/strong&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# migrate from ConfigMap to ResourceGroup inventory object&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RESOURCE_GROUP_INVENTORY&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
kpt live migrate my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# check the steps that will occur for the migrate, but&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# do not actually run them.&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RESOURCE_GROUP_INVENTORY&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
kpt live migrate my-dir/ --dry-run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# migrate from ConfigMap to ResourceGroup inventory object, forcing&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# new values for the inventory object to be written to the Kptfile.&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RESOURCE_GROUP_INVENTORY&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
kpt live migrate my-dir/ --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt live migrate DIRECTORY [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;args&#34;&gt;Args&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;DIR:
  Path to a package directory. The package must contain a Kptfile.
  If the package directory contains a ConfigMap inventory template
  file (usually named inventory-template.yaml), then this file
  will be deleted.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;flags&#34;&gt;Flags&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;--dry-run:
  Do not actually run the migrate; only print out the steps that
  will occur.
--force:
  Set inventory values even if already set in Kptfile.
--name:
  Set the inventory object name, instead of default generated
  name (e.g. inventory-62308923). The user must make sure the
  inventory name does not collide with other inventory objects
  in the same namespace.
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Preview</title>
      <link>https://googlecontainertools.github.io/kpt/reference/live/preview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/live/preview/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Preview prints the changes apply would make to the cluster
--&gt;


&lt;p&gt;
    
    &lt;asciinema-player
            src=&#34;https://googlecontainertools.github.io/kpt//casts/live-preview.cast&#34;
            
            preload=&#34;1&#34;
            
            start-at=&#34;0&#34;
            speed=&#34;1&#34;
            
            
            
            
            
            
            
            
    &gt;&lt;/asciinema-player&gt;
        &lt;script&gt;
        let c=document.getElementsByClassName(&#34;td-content&#34;)
        if (c &amp;&amp; c.length &gt; 0) {
            let w = c[0].clientWidth
            let p=document.getElementsByTagName(&#39;asciinema-player&#39;)
            if (p &amp;&amp; p.length &gt; 0) {
                p.cols = w
            }
        }
    &lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;The preview command will run through the same steps as apply, but
it will only print what would happen when running apply against the current
live cluster state. With the &lt;code&gt;--server-side&lt;/code&gt; flag, the dry-run will
be performed on resources sent to the server (but not actually applied),
instead of less thorough dry-run calculations on the client.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# preview apply for a package&lt;/span&gt;
kpt live preview my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# preview destroy for a package&lt;/span&gt;
kpt live preview --destroy my-dir/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt live preview DIRECTORY [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;args&#34;&gt;Args&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;DIRECTORY:
  One directory that contain k8s manifests. The directory
  must contain exactly one ConfigMap with the grouping object annotation.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;flags&#34;&gt;Flags&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;--destroy:
  If true, dry-run deletion of all resources.

--server-side:
  Boolean which performs the dry-run by sending the resource to the server.
  Default value is false (client-side dry-run). Available
  in version v0.36.0 and above. If not available, the user will see:
  &amp;quot;error: unknown flag&amp;quot;.

--field-manager:
  String that can be set if --server-side flag is also set, which defines
  the resources field owner during dry-run. Available
  in version v0.36.0 and above. If not available, the user will see:
  &amp;quot;error: unknown flag&amp;quot;.

--force-conflicts:
  Boolean that can be set if --server-side flag is also set, which overrides
  field ownership conflicts during dry-run. Available
  in version v0.36.0 and above. If not available, the user will see:
  &amp;quot;error: unknown flag&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
    <item>
      <title>Reference: Status</title>
      <link>https://googlecontainertools.github.io/kpt/reference/live/status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/reference/live/status/</guid>
      <description>
        
        
        &lt;!--mdtogo:Short
    Status shows the status for the resources in the cluster
--&gt;
&lt;p&gt;The status command will print the status for all resources in the live state
that belong to the current inventory. It will use the &lt;a href=&#34;https://googlecontainertools.github.io/kpt/reference/live/apply/#prune&#34;&gt;Inventory Template&lt;/a&gt; to
look up the set of resources in the inventory in the live state and poll all
those resources for their status until either an exit criteria has been met
or the process is cancelled.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;!--mdtogo:Examples--&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Monitor status for a set of resources based on manifests. Wait until all&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# resources have reconciled.&lt;/span&gt;
kpt live status my-app/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Monitor status for a set of resources based on manifests. Output in table format:&lt;/span&gt;
kpt live status my-app/ --poll-until&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;forever --output&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Check status for a set of resources read from stdin with output in events format&lt;/span&gt;
kpt cfg cat my-app &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; kpt live status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--mdtogo--&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;!--mdtogo:Long--&gt;
&lt;pre&gt;&lt;code&gt;kpt live status (DIR | STDIN) [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;args&#34;&gt;Args&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;DIR | STDIN:
  Path to a directory if an argument is provided or reading from stdin if left
  blank. In both situations one of the manifests must contain exactly one
  ConfigMap with the inventory template annotation.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;flags&#34;&gt;Flags&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;--poll-period (duration):
  The frequency with which the cluster will be polled to determine the status
  of the applied resources. The default value is every 2 seconds.

--poll-until (string):
  When to stop polling for status and exist. Must be one of the following:
    known:   Exit when the status for all resources have been found.
    current: Exit when the status for all resources have reached the Current status.
    deleted: Exit when the status for all resources have reached the NotFound
             status, i.e. all the resources have been deleted from the live state.
    forever: Keep polling for status until interrupted.
  The default value is â€˜knownâ€™.

--output (string):
  Determines the output format for the status information. Must be one of the following:
    events: The output will be a list of the status events as they become available.
    table:  The output will be presented as a table that will be updated inline
            as the status of resources become available.
  The default value is â€˜eventsâ€™.

--timeout (duration):
  Determines how long the command should run before exiting. This deadline will
  be enforced regardless of the value of the --poll-until flag. The default is
  to wait forever.
&lt;/code&gt;&lt;/pre&gt;&lt;!--mdtogo--&gt;

      </description>
    </item>
    
  </channel>
</rss>
