<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kpt – Ecosystem</title>
    <link>https://googlecontainertools.github.io/kpt/guides/ecosystem/</link>
    <description>Recent content in Ecosystem on Kpt</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://googlecontainertools.github.io/kpt/guides/ecosystem/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Guides: Kustomize</title>
      <link>https://googlecontainertools.github.io/kpt/guides/ecosystem/kustomize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/guides/ecosystem/kustomize/</guid>
      <description>
        
        
        &lt;p&gt;&lt;em&gt;A kustomization.yaml is just another configuration file and works great for
breaking packages into pieces.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Kustomize can be used to create packages with advanced structuring, instead of
just a single flat YAML bundle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Highlight pieces users are encouraged to modify by creating and documenting
patches.&lt;/li&gt;
&lt;li&gt;Define non-consumer-editable pieces of the package (referenced as kustomize
remote bases) as separate from consumer-editable pieces (included in the
package).&lt;/li&gt;
&lt;li&gt;Create a package that can be deployed to multiple environments by defining
dev, staging, prod as separate kustomization.yaml directories within a single
package.&lt;/li&gt;
&lt;li&gt;Enable cross-cutting edits by exposing namespace, common labels, etc in the
kustomization.yaml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A kustomize package could simply be a kustomization.yaml referencing a base,
and a collection of patches for the consumer to edit.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Guides: Helm</title>
      <link>https://googlecontainertools.github.io/kpt/guides/ecosystem/helm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/guides/ecosystem/helm/</guid>
      <description>
        
        
        &lt;p&gt;&lt;em&gt;Any solution which emits configuration can also generate kpt packages
(because they are just configuration).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Helm charts may be used to generate kpt packages which can then be further
customized directly.&lt;/p&gt;
&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#fetch-a-helm-chart&#34;&gt;Fetch a Helm chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#expand-the-helm-chart&#34;&gt;Expand the Helm chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#publish-the-kpt-package&#34;&gt;Publish the kpt package&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;fetch-a-helm-chart&#34;&gt;Fetch a Helm chart&lt;/h2&gt;
&lt;h5 id=&#34;command&#34;&gt;Command&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm fetch stable/mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pull down a helm chart for expansion.  This may optionally be checked into
git so it can be expanded again in the future.&lt;/p&gt;
&lt;h2 id=&#34;expand-the-helm-chart&#34;&gt;Expand the Helm chart&lt;/h2&gt;
&lt;h5 id=&#34;command-1&#34;&gt;Command&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;helm template mysql-1.3.1.tgz --output-dir .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Expand the Helm chart into resource configuration.  Template values may be
provided on the commandline or through a &lt;code&gt;value.yaml&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;output&#34;&gt;Output&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;wrote ./mysql/templates/secrets.yaml
wrote ./mysql/templates/tests/test-configmap.yaml
wrote ./mysql/templates/pvc.yaml
wrote ./mysql/templates/svc.yaml
wrote ./mysql/templates/tests/test.yaml
wrote ./mysql/templates/deployment.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;command-2&#34;&gt;Command&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ tree mysql/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;output-1&#34;&gt;Output&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;mysql
└── templates
├── deployment.yaml
├── pvc.yaml
├── secrets.yaml
├── svc.yaml
└── tests
├── test-configmap.yaml
└── test.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;publish-the-kpt-package&#34;&gt;Publish the kpt package&lt;/h2&gt;
&lt;p&gt;The expanded chart will function as a kpt package once checked into a git
repository.  It may optionally be tagged with a package version.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;git add .
git commit -m “add mysql package”
git tag package-examples/mysql/mysql/templates/v0.1.0
git push package-examples/mysql/mysql/templates/v0.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once stored in git, kpt can be used to fetch the package and customize it directly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;REPO&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;https://github.com/GoogleContainerTools/kpt.git
kpt pkg get &lt;span style=&#34;color:#000&#34;&gt;$REPO&lt;/span&gt;/package-examples/mysql/mysql/templates@v0.16.0 mysql/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The package local package can be modified after it is fetched, and pull in
upstream changes when the upstream package is regenerated from the chart
or otherwise modified.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Guides: Open Application Model (OAM)</title>
      <link>https://googlecontainertools.github.io/kpt/guides/ecosystem/oam/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://googlecontainertools.github.io/kpt/guides/ecosystem/oam/</guid>
      <description>
        
        
        &lt;p&gt;This guidance will demonstrate how to use kpt to manage custom Kubernetes applications (i.e. apps defined by CRDs instead of raw Kubernetes workloads).&lt;/p&gt;
&lt;p&gt;We will use &lt;a href=&#34;https://github.com/oam-dev/spec&#34;&gt;Open Application Model&lt;/a&gt;(OAM) to describe the app for standardization and portability consideration. But you are free to use any Custom Resource to describe your application as well. &lt;a href=&#34;https://github.com/crossplane/crossplane&#34;&gt;Crossplane&lt;/a&gt; will be installed as the OAM runtime for Kubernetes.&lt;/p&gt;
&lt;h2 id=&#34;what-is-kpt-and-what-is-oam&#34;&gt;What is kpt and what is OAM?&lt;/h2&gt;
&lt;p&gt;Both kpt and OAM are outcomes of &amp;ldquo;Configuration-as-Data (or, Infrastructure-as-Data, IaD)&amp;quot;.&lt;/p&gt;
&lt;p&gt;Pioneered by &lt;a href=&#34;https://twitter.com/bgrant0607/status/1221485437153243137&#34;&gt;Kubernetes community&lt;/a&gt;, Configuration-as-Data emphasizes that &amp;ldquo;configuration should be treated as data and leverage pipelines for manipulation and policy enforcement&amp;rdquo;. In Kubernetes, Configuration-as-Data approach builds upon the design of the &lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/resource-management.md&#34;&gt;Kubernetes resource model (KRM)&lt;/a&gt;. As a result, today any resource we applied to Kubernetes is a piece of data that represents the desired state for certain part of application or infrastructure in the real system.&lt;/p&gt;
&lt;p&gt;With the heart of Configuration-as-Data, a typical Kubernetes native application management workflow just looks like a &amp;ldquo;pipeline&amp;rdquo;. See the picture below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./resource/kpt_oam.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this workflow, kpt is the manipulator of data. Stored in data source like Git, the original data (e.g. deployment.yaml) will pass through a pipeline of kpt functionalities to be manipulated into the desire state step by step. For example, &lt;code&gt;labels&lt;/code&gt; added, &lt;code&gt;replicas&lt;/code&gt; modified and &lt;code&gt;image&lt;/code&gt; updated etc.&lt;/p&gt;
&lt;p&gt;So what is OAM then? OAM is the format of data. More accurately, OAM is a specific data format so Kubernetes can expose higher level abstraction such as &amp;ldquo;application&amp;rdquo; to developers.&lt;/p&gt;
&lt;p&gt;In that sense, it&amp;rsquo;s a natural match for using kpt to manipulate the data which is formatted by OAM specification.&lt;/p&gt;
&lt;h2 id=&#34;pre-requisites&#34;&gt;Pre-requisites&lt;/h2&gt;
&lt;p&gt;Install OAM Kubernetes runtime (Crossplane) by following &lt;a href=&#34;https://github.com/oam-dev/crossplane-oam-sample#installation&#34;&gt;its installation guides&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;create-app-repository-for-kpt&#34;&gt;Create App Repository for kpt&lt;/h2&gt;
&lt;p&gt;kpt directly use GitHub repo as App Repository, so no action needed.&lt;/p&gt;
&lt;p&gt;With the help of kpt, we could directly use GitHub Repo as App Repository without organizing apps in any fixed format.&lt;/p&gt;
&lt;h3 id=&#34;release-your-application-to-app-repository&#34;&gt;Release your application to App Repository&lt;/h3&gt;
&lt;p&gt;So release your OAM app only needs two steps.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create/Fork a github repo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Commit and push your app.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git add sampleapp/
git commit -m &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;my sampleapp commit&amp;#34;&lt;/span&gt;
git remote add origin git@github.com:&amp;lt;your-account&amp;gt;/&amp;lt;your-app-repo&amp;gt;.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;fetch-oam-app-from-remote-repository&#34;&gt;Fetch OAM app from remote Repository&lt;/h3&gt;
&lt;p&gt;Using our &lt;a href=&#34;https://github.com/oam-dev/samples/tree/master/5.OAM_KPT_Demo/repository/&#34;&gt;example repository&lt;/a&gt; for this demo.&lt;/p&gt;
&lt;p&gt;You could fetch OAM app from remote Repository using &lt;a href=&#34;https://googlecontainertools.github.io/kpt/reference/pkg/get/&#34;&gt;kpt pkg get&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;command&#34;&gt;Command&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kpt pkg get https://github.com/oam-dev/samples.git/5.OAM_KPT_Demo/repository/sampleapp sampleapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;output&#34;&gt;Output&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-output&#34; data-lang=&#34;output&#34;&gt;fetching package /5.OAM_KPT_Demo/repository/sampleapp from https://github.com/oam-dev/samples to sampleapp
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;➜  kpt tree sampleapp
sampleapp
├── Kptfile
├── appconfig.yaml
└── component.yaml

&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; directories, &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt; files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;install-sample-app&#34;&gt;Install sample app&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl apply -f sampleapp/
component.core.oam.dev/example-component created
applicationconfiguration.core.oam.dev/example-appconfig created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Several resources are created:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Component is the description of what you want to deploy.&lt;/li&gt;
&lt;li&gt;ApplicationConfiguration is the description of operational policies for your Component.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check the underlying Deployment instance generated by OAM.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kubectl get deploy
NAME                                    READY   UP-TO-DATE   AVAILABLE   AGE
example-appconfig-workload-deployment   3/3     &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;            &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;           114s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sync-with-remote-app-repository&#34;&gt;Sync with Remote App Repository&lt;/h3&gt;
&lt;p&gt;When some changes occurred both local and remote apps, you could sync and merge with kpt.&lt;/p&gt;
&lt;p&gt;Because kpt packages must be checked into a git repo before they are updated, if your app is not in the control of git,
you could init like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git init
git add sampleapp
git commit -m &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;init&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then our local sampleapp can be changed and sync with the remote app. For example, assume our remote sampleapp has changed and tagged as &lt;code&gt;v0.1.0&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;kpt pkg update sampleapp@v0.1.0 --strategy&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;resource-merge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ref to &lt;a href=&#34;https://googlecontainertools.github.io/kpt/guides/consumer/update/#commit-local-changes&#34;&gt;update section&lt;/a&gt; of kpt for more details.&lt;/p&gt;
&lt;h3 id=&#34;parameter-setting&#34;&gt;Parameter Setting&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://googlecontainertools.github.io/kpt/guides/consumer/set/&#34;&gt;kpt setters&lt;/a&gt; is a powerful feature which naturally matches to the idea of &amp;ldquo;separate concerns&amp;rdquo; design from OAM.&lt;/p&gt;
&lt;p&gt;In Open Application Model, developers can claim certain fields in the application YAML as &amp;ldquo;configurable&amp;rdquo;, so in the following workflow, operators (or the platform) will be allowed to modify these fields.&lt;/p&gt;
&lt;p&gt;Now this goal can be easily achieved with help of kpt.&lt;/p&gt;
&lt;h4 id=&#34;create-setter-by-app-developer&#34;&gt;Create setter by App Developer&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s say the developer need to claim two fields as &amp;ldquo;configurable&amp;rdquo; for his application, he can add two kpt setters here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kpt cfg create-setter sampleapp/ instance-name example-component --field &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;metadata.name&amp;#34;&lt;/span&gt; --description &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;use to set an instance name&amp;#34;&lt;/span&gt; --set-by &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;sampleapp developer&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kpt cfg create-setter sampleapp/ image nginx:1.16.1 --field &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt; --description &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;use to set image for component&amp;#34;&lt;/span&gt; --set-by &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;sampleapp developer&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then the app operator could see which parameters are available in this component like below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kpt cfg list-setters sampleapp/
  NAME              VALUE               SET BY                   DESCRIPTION             COUNT
  image           nginx:1.16.1        sampleapp developer   use to &lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt; image &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;for&lt;/span&gt; component   &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
  instance-name   example-component   sampleapp developer   use to &lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt; an instance name      &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s very clear and easy to understand.&lt;/p&gt;
&lt;h4 id=&#34;set-value-by-app-operator&#34;&gt;Set Value by App Operator&lt;/h4&gt;
&lt;p&gt;Then the application operator could set &lt;code&gt;instance-name&lt;/code&gt; with a new name like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kpt cfg &lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt; sampleapp/ instance-name test-component
&lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; fields
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check the component and you will find the instane name has been changed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cat sampleapp/component.yaml
apiVersion: core.oam.dev/v1alpha2
kind: Component
metadata:
  name: test-component &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# {&amp;#34;$ref&amp;#34;:&amp;#34;#/definitions/io.k8s.cli.setters.instance-name&amp;#34;}&lt;/span&gt;
spec:
  workload:
    apiVersion: core.oam.dev/v1alpha2
    kind: ContainerizedWorkload
    spec:
      containers:
      - name: my-nginx
        image: nginx:1.16.1 &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# {&amp;#34;$ref&amp;#34;:&amp;#34;#/definitions/io.k8s.cli.setters.image&amp;#34;}&lt;/span&gt;
        ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;app-overview&#34;&gt;App Overview&lt;/h3&gt;
&lt;p&gt;With kpt, you could see an overview of your App.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kpt cfg count sampleapp
ApplicationConfiguration: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
Component: &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So in the sampleapp, we have one ApplicationConfiguration and one Component.&lt;/p&gt;
&lt;h3 id=&#34;live-apply&#34;&gt;Live apply&lt;/h3&gt;
&lt;p&gt;kpt includes the next-generation &lt;strong&gt;apply&lt;/strong&gt; commands developed out of the Kubernetes &lt;a href=&#34;https://github.com/kubernetes-sigs/cli-utils&#34;&gt;cli-utils&lt;/a&gt; repository as the &lt;a href=&#34;https://googlecontainertools.github.io/kpt/reference/live/apply&#34;&gt;&lt;code&gt;kpt live apply&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt;
&lt;p&gt;This means with &lt;code&gt;kpt live apply&lt;/code&gt; command, we could wait for the controller reconcile.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kpt live init sampleapp
Initialized: ../sampleapp/grouping-object-template.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ kpt live apply sampleapp --reconcile-timeout&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;10m
configmap/inventory-9ac03a44 unchanged
applicationconfiguration.core.oam.dev/example-appconfig created
component.core.oam.dev/example-component created
&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt; resource&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; applied. &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt; created, &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt; unchanged, &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; configured
configmap/inventory-9ac03a44 is Current: Resource is always ready
applicationconfiguration.core.oam.dev/example-appconfig is NotFound: Resource not found
component.core.oam.dev/example-component is NotFound: Resource not found
applicationconfiguration.core.oam.dev/example-appconfig is Current: Resource is current
component.core.oam.dev/example-component is Current: Resource is current
all resources has reached the Current status
&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt; resource&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; pruned
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Happly building OAM apps with kpt!&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
